AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  CallableEndpoint:
    Type: String
    Description: endpoint of a deployed Callable instance
  CallableUser:
    Type: String
  CallablePassword:
    Type: String
    NoEcho: true
  IdocReference:
    Type: String
    Description: Idoc Reference as it is generated by the Callable UI, e.g. BUPAFS_FS_CREATE_FRM_DATA01/BUPA_FS_CREATE_FRM_DATA
Resources:
  InvokeCallable:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      InlineCode: |
                  const AWS = require('aws-sdk');
                  const S3 = new AWS.S3();
                  const https = require('https');

                  exports.handler = function(event, context, callback) {
                    var bucket = event.Records[0].s3.bucket.name;
                    var key    = event.Records[0].s3.object.key;

                    console.log(`receiving event for s3://${bucket}/${key}`);


                    S3.getObject({Bucket: bucket,Key: key},(err,obj)=>{
                      let buf = obj.Body;
                      let options = {
                        hostname: process.env.endpoint,
                        port: 443,
                        path: `/idoc/${process.env.idoc}`,
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json',
                          'Content-Length': Buffer.byteLength(buf),
                          'Authorization': 'Basic '+ Buffer.from(process.env.user + ':' + process.env.password).toString('base64')
                        }
                      };
                      console.log("requesting...");
                      console.log(JSON.stringify(options,null,2));
                      var req = https.request(options, (res) => {
                        console.log(`STATUS: ${res.statusCode}`);
                        res.setEncoding('utf8');
                        res.on('data', (chunk) => {
                          console.log(`${chunk}`);
                        });
                        res.on('end', () => {
                          console.log('done');
                          callback(null,"ok");
                        });
                      });
                      
                      req.on('error', (e) => {
                        console.log(`problem with request: ${e.message}`);
                      });
                      
                      req.write(buf);
                      req.end();
                    });
                  };
      Timeout: 60
      Policies: AWSLambdaExecute
      Environment:
        Variables:
          endpoint: !Ref CallableEndpoint
          idoc: !Ref IdocReference
          user: !Ref CallableUser
          password: !Ref CallablePassword
      Events:
        S3CreateObjectEvent:
          Type: S3
          Properties:
            Bucket: !Ref IdocBucket
            Events: s3:ObjectCreated:*
  IdocBucket:
    Type: AWS::S3::Bucket
Outputs:
  IdocBucket:
    Value: !Ref IdocBucket